----------------------------
Dependency On Server At Boot
============================

Author - Copyright (C) 2018-2019 Mark Grant

--------
Contents
========

1 ... Project Description

2 ... AutoTools (configure and make) Installation

3 ... Ubuntu, Debian and Raspbian Installation

4 ... Utility Scripts



-------------------------
1 ... Project Description
=========================

This project enables you to test whether a server is contactable during boot and
execute a series of commands depending on the outcome. It is probably easiest to
understand from an example.

The Problem
-----------
You have a laptop which when you are in the office needs to automatically mount
some shares from an internal server. When travelling you don't want the laptop
to attempt to automount the shares because that produces boot errors and boot
delays. So a plain auto entry in /etc/fstab is out.

The Solution
------------
Install this project.

Enter the shares in /etc/fstab with the noauto option.

Add the server to the /etc/dosab/server.list file.

Add the mount commands to a file you create called
/etc/dosab/server-name.available. (In this case if the server is unavailable you
just want to do nothing so there is no server-name.unavailable file.

Now, every time you boot the laptop it will mount the shares if the server is
available and otherwise do nothing.

Actual example files are available in the source tree in src/conf/etc and
installed by the project in $docdir (often /usr/share/doc/server-dependency or
/usr/local/share/doc/server-dependency).

N.B.
----
At a source modification / development level, this project expects to reside in
a git environment. This manifests itself in 2 places:-
1) ... .gitignore files are included in the source.
2) ... The make target, 'srctarball', relies on the command 'git am' so it will
	fail if git is not installed or it is not in a git repository.


-------------------------------------------------
2 ... AutoTools (configure and make) Installation
=================================================

a) ... Download either the source or distribution tarball (the .tar.gz file)
	from:-
	https://github.com/m-grant-prg/server-dependency/releases

b) ... Extract the tarball preserving the directory structure.

c) ... cd to the directory created.

d) ... If you downloaded the source tarball type 'autoreconf -if'

e) ... Type './configure --enable-systemd=yes'

f) ... As root or sudo, type 'make install clean'

g) ... Edit the server.list file to enter the servers to check.

h) ... Create server-name.available and server-name.unavailable files as
	required.

(Quote marks are for textual clarity only).

To uninstall the package:

1 ... cd to the directory created in the above install process.

2 ... As root or sudo, type 'make uninstall clean'


----------------------------------------------
3 ... Ubuntu, Debian and Raspbian Installation
==============================================
Please refer to the relevant installation section on the wiki at:-

https://github.com/m-grant-prg/server-dependency/wiki


---------------------
4 ... Utility Scripts
=====================
In the project root directory there is 1 helper script; bootstrap.sh.

bootstrap.sh
------------
This misleadingly named script bootstraps the project build and provides other
useful features. The main options below are probably b, c, C, D and T.

In AutoTools it is usually advisable to perform parallel builds. This means you
build somewhere other than the project root. This is because building creates
files and they would confuse the project root downwards. I always create a build
directory straight off the project root, cd to there and do all build and git
work from there, (.gitignore is already set to ignore such a directory).

Assuming you adopt the preceding paragraph then a typical invocation of the
script would be:-

../bootstrap.sh --config --build ..

The last '..' points the way to project root.

The full list of arguments to bootstrap.sh are:-

	-a, --at-only
		during testing and for an AutoTools-only install, some build
		changes are required. e.g. You may reference an external Java
		jar in datadir but in AT builds and installations this may
		expand to /usr/local/share... So a substitution is required for
		this scenario.

	-b, --build
		make the project.

	-c, --config
		configure the project.

	-C, --distcheck
		perform a normal make distcheck.

	-d, --debug
		build with appropriate debug flags.

	-D, --dist
		perform a make dist.

	-F, --distcheckfake
		run a make distcheck using a fake AT standard directory as a
		substitute for an absolute path which distcheck does not
		support.

	-g, --gnulib
		run gnulib-tool --update. Checks for the existence of the cache
		file proj-root/m4/gnulib-cache.m4. If it does not exist the
		update is not run.

	-h, --help
		prints usage information.

	-H, --header-check
		show include stack depth

	-s, --sparse
		pass --enable-sparse=yes to configure.

	-t, --testing-hacks
		some build changes may be required for testing purposes. e.g. A
		script may invoke a project jar file which when installed will
		be somewhere under datadir, but during testing it is in the
		project tree.

	-T, --source-tarball
		perform a make srctarball to build a source tarball.

	-v, --verbose
		emit extra information

	-V, --version
		prints version information

Options b build, C distcheck, D dist, F distcheckfake and T source-tarball are
mutually exclusive.

Options a at-only, d debug, F distcheckfake, H header-check, s sparse,
t testing-hacks and v verbose  are enabled by configure so require option c
config.

